{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js"],"names":["module","exports","NewCommentForm","onAddedComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","props","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,gIC6CdC,EAvCQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QAClCC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAE7BC,qBAAU,WACO,cAAXF,GAA2BC,GAC7BR,MAED,CAACO,EAAQC,EAAOR,IAEnB,IAAMU,EAAoB,SAAAC,GACxBA,EAAMC,iBAEN,IAAMC,EAAcX,EAAeY,QAAQC,MAI3CT,EAAY,CAAEU,YAAa,CAAEC,KAAMJ,GAAeZ,aAGpD,OACE,uBAAMiB,UAAWC,IAAQC,KAAMC,SAAUX,EAAzC,UACc,YAAXH,GACC,qBAAKW,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,MAGJ,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUX,EAA3C,UACE,uBAAOc,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKzB,OAEvC,qBAAKgB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBC9BOW,EARK,SAAAC,GAClB,OACE,oBAAIZ,UAAWC,IAAQY,KAAvB,SACE,4BAAID,EAAMb,U,iBCQDe,EAVM,SAAAF,GACnB,OACE,oBAAIZ,UAAWC,IAAQc,SAAvB,SACGH,EAAMG,SAASC,KAAI,SAAAC,GAAO,OACzB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQV,UC+DnBW,UA5DE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGQtC,EAFOuC,cAEPvC,QAER,EAAsDG,YAAQqC,KAAtDnC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcmC,EAAnC,EAA6BC,KAE7BlC,qBAAU,WACRH,EAAYL,KACX,CAACA,EAASK,IAEb,IAQI2B,EAJEW,EAAsBC,uBAAY,WACtCvC,EAAYL,KACX,CAACK,EAAaL,IAuBjB,MAnBe,YAAXM,IACF0B,EACE,qBAAKf,UAAU,WAAf,SACE,cAACI,EAAA,EAAD,OAKS,cAAXf,GAA0BmC,IAC5BT,EAAW,cAAC,EAAD,CAAcA,SAAUS,KAIxB,cAAXnC,GACEmC,GAA4C,IAA1BA,EAAeI,SAEnCb,EAAW,mBAAGf,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQc,SAA5B,UACE,gDACEK,GACA,wBAAQpB,UAAU,MAAM6B,QAjCC,WAC7BR,GAAmB,IAgCf,2BAIDD,GACC,cAAC,EAAD,CACErC,QAASA,EACTD,eAAgB4C,IAGnBX","file":"static/js/4.cd51623a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__13Uhm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1UjHq\",\"loading\":\"NewCommentForm_loading__mJg8O\",\"control\":\"NewCommentForm_control__1nTIG\",\"actions\":\"NewCommentForm_actions__3IQV0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__23_aR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3jdOG\"};","import { useRef, useEffect } from 'react'\n\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport useHttp from '../../hooks/use-http'\nimport { addComment } from '../../lib/api'\nimport classes from './NewCommentForm.module.css'\n\nconst NewCommentForm = ({ onAddedComment, quoteId }) => {\n  const commentTextRef = useRef()\n\n  const { sendRequest, status, error } = useHttp(addComment)\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment()\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = event => {\n    event.preventDefault()\n\n    const enteredText = commentTextRef.current.value\n\n    // optional: Could validate here\n\n    sendRequest({ commentData: { text: enteredText }, quoteId })\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  )\n}\n\nexport default NewCommentForm\n","import classes from './CommentItem.module.css'\n\nconst CommentItem = props => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  )\n}\n\nexport default CommentItem\n","import CommentItem from './CommentItem'\nimport classes from './CommentsList.module.css'\n\nconst CommentsList = props => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map(comment => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  )\n}\n\nexport default CommentsList\n","import { useState, useEffect, useCallback } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport classes from './Comments.module.css'\nimport NewCommentForm from './NewCommentForm'\nimport useHttp from '../../hooks/use-http'\nimport { getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false)\n  const params = useParams()\n\n  const { quoteId } = params\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments)\n\n  useEffect(() => {\n    sendRequest(quoteId)\n  }, [quoteId, sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true)\n  }\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n\n  let comments\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (status === 'completed' && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  )\n}\n\nexport default Comments\n"],"sourceRoot":""}