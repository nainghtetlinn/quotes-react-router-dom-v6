{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","navigate","useNavigate","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","error","loadedQuotes","data","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCmBdC,EAhBG,SAAAC,GAChB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAIN,EAAMO,GAAIN,UAAU,MAA9B,iC,iBCoCSO,EAlCG,SAAAR,GAChB,IAXkBS,EAAQC,EAWpBC,EAAWC,cACXC,EAAWC,cAEXC,EACiD,QAArD,IAAIC,gBAAgBH,EAASI,QAAQC,IAAI,QAMrCC,GArBYV,EAqBcT,EAAMS,OArBZC,EAqBoBK,EApBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAkBxC,OACE,qCACE,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QATe,WAC3Bb,EAAS,UAAYI,EAAqB,OAAS,SAQ/C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAId,UAAWC,IAAQuB,KAAvB,SACGN,EAAaO,KAAI,SAAAC,GAAK,OACrB,cAAC,EAAD,CAEEpB,GAAIoB,EAAMpB,GACVF,OAAQsB,EAAMtB,OACdD,KAAMuB,EAAMvB,MAHPuB,EAAMpB,a,wBCvBRqB,EAXO,WACpB,OACE,sBAAK3B,UAAWC,IAAQ2B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMvB,GAAG,aAAaL,UAAU,MAAhC,6B,gBC8BS6B,UA9BG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACAC,EAHF,EAGEA,MACMC,EAJR,EAIEC,KAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKjC,UAAU,WAAf,SACE,cAACsC,EAAA,EAAD,MAKFJ,EACK,mBAAGlC,UAAU,mBAAb,SAAiCkC,IAG3B,cAAXD,GAA4BE,GAAwC,IAAxBA,EAAaI,OAGtD,cAAC,EAAD,CAAW/B,OAAQ2B,IAFjB,cAAC,EAAD","file":"static/js/5.b8d1c3c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3in6F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3yYBO\",\"sorting\":\"QuoteList_sorting__2m9Zl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1IkGn\"};","import { Link } from 'react-router-dom'\n\nimport classes from './QuoteItem.module.css'\n\nconst QuoteItem = props => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={props.id} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  )\n}\n\nexport default QuoteItem\n","import { useNavigate, useLocation } from 'react-router-dom'\n\nimport QuoteItem from './QuoteItem'\nimport classes from './QuoteList.module.css'\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1\n    }\n  })\n}\n\nconst QuoteList = props => {\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  const isSortingAscending =\n    new URLSearchParams(location.search).get('sort') === 'asc'\n\n  const changeSortingHandler = () => {\n    navigate('?sort=' + (isSortingAscending ? 'desc' : 'asc'))\n  }\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n\n  return (\n    <>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map(quote => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default QuoteList\n","import { Link } from 'react-router-dom'\n\nimport classes from './NoQuotesFound.module.css'\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  )\n}\n\nexport default NoQuotesFound\n","import { useEffect } from 'react'\r\n\r\nimport QuoteList from '../components/quotes/QuoteList'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllQuotes } from '../lib/api'\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    error,\r\n    data: loadedQuotes,\r\n  } = useHttp(getAllQuotes, true)\r\n\r\n  useEffect(() => {\r\n    sendRequest()\r\n  }, [sendRequest])\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />\r\n  }\r\n  return <QuoteList quotes={loadedQuotes} />\r\n}\r\n\r\nexport default AllQuotes\r\n"],"sourceRoot":""}